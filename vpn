鉴于满版的都是VPN的帖子, 还有很多很多的安装包....然后大部分都是只扔个包...什么都没有,,,,
其实我觉得可以写成一个脚本就可以解决的啊...
下面是基于水寒前辈写出来的脚本...
记得当初刚来玉泉好像是用不了?问小香猪bb才参考88上的一篇帖子设置的xl2tpd的选项.然后就可以用了....

然后基本做的修改
1. 把所有东西集成到一个文件当中了. 依赖的包(ArchLinux下): iproute2, ppp, xl2ptd. 其它发行版不知叫什么....应该差不远...
2. 之前院版上蛋博发过个关于mtu和mru的问题, 假如使用默认的话会导致数据包丢失连接断掉? 具体症状是看视频看看一般缓冲停了...于是这里修改成了1400
3. 紫金港玉泉的问题, 玉泉直接静态ip内网,然后VPN外网,只有一个ppp0 设备, 而紫金港使用那个很便宜闪讯拨号的话会多出一个ppp设备.于是VPN开启的就是ppp1了,这个也是参考前面有个学长写的脚本弄的.
4. NetworkManager的问题.当初用ubuntu 12.04还是什么时候, 有个版本的NetworkManager是会干扰xl2tpd的....不知现在还有没有这个问题, 我的解决办法就是不用NetworkManager啦....

关于VPN的问题, 很多可以查看那个xl2tpd 的log信息, syslog的话在var/log下面看, systemd的话 journalctl一下...其它的我就不清楚了....反正有个log的地方可以看~

下面的代码在ArchLinux下直接可用(systemd版本...)
假如用在其它发行版上可以去掉第16行的注视或修改改行, 指向 xl2tpd daemon文件,
然后在 215 和216行处的xl2tpd启动方式进行修改基本就可以了....
总共就250行的代码....其实大部分人都可以看得懂大部分的代码(虽然我也看不太懂....), 然后基本的问题都可以解决了....

有不足的地方欢迎跟帖~~那LUG wiki怎么用啊? 觉得还可以的话有人去把这个编辑进去么?
然后发这贴的目的就是希望以后班上能少点VPN的帖子啊~~~
希望那些用着别人写的脚本的同学可以看看下面代码, 理解理解, 然后以后就可以不需要依靠别人的脚本了~~

  1    
  2    #!/bin/bash
  3    
  4    ####################
  5    # Variables
  6    ####################
  7    ## How many seconds to wait for the ppp to come up each try
  8    TIMEOUT=120
  9    ## How many seconds to wait for l2tpd to restart
 10    L2TPD_TIMEOUT=10
 11    ## LAC name in config file
 12    L2TPD_LAC=zju
 13    
 14    L2TPD_CONTROL_DIR=/var/run/xl2tpd
 15    L2TPD_CONTROL_FILE=$L2TPD_CONTROL_DIR/l2tp-control
 16    #L2TPD_INIT_FILE=/etc/rc.d/xl2tpd
 17    L2TPD_CFG_FILE=/etc/xl2tpd/xl2tpd.conf
 18    CHAP_SECRET_FILE=/etc/ppp/chap-secrets
 19    PPP_OPT_FILE=/etc/xl2tpd/options
 20    
 21    LNS=10.5.1.9
 22    
 23    ## Global variables set by function
 24    GW=0.0.0.0
 25    PPP=ppp0
 26    
 27    ####################
 28    # Commands
 29    ####################
 30    function usage
 31    {
 32          echo "$0: A utility for ZJU school L2TP VPN."
 33          echo "Usage: $0 [ACTION]"
 34          echo
 35          echo "Actions: "
 36          echo "      Default             Connect."
 37          echo "      -d                  Disconnect."
 38          echo "      -r                  Reconnect."
 39          echo "      -c                  Configure."
 40          echo "      -h                  Show this information."
 41          echo
 42    }
 43    
 44    function connect
 45    {
 46          if ppp_alive ; then
 47            echo "[MSG] VPN already connected."
 48          else
 49            restart_l2tpd && bring_up_ppp && setup_route
 50          fi
 51    }
 52    
 53    function disconnect
 54    {
 55          echo -n "[MSG] Disconnecting VPN ... "
 56          echo "d $L2TPD_LAC" > $L2TPD_CONTROL_FILE
 57          sleep 1
 58          echo "Done!"
 59          return 0
 60    }
 61    
 62    function reconnect
 63    {
 64          disconnect && restart_l2tpd && bring_up_ppp && setup_route
 65    }
 66    
 67    function configure
 68    {
 69          echo "Configure L2TP VPN for ZJU.";
 70          read_param && write_settings && free_param && reconnect
 71    }
 72    
 73    ####################
 74    # Internal utility functions
 75    ####################
 76    function init
 77    {
 78      GW=$(ip route get $LNS 2>/dev/null |grep "$LNS"|awk {''print $3''})
 79          if [ $(expr length $GW) -ge 6 ]; then
 80            PPP=ppp0
 81          else
 82            PPP=ppp1
 83        GW=$(ip add show $GW| grep inet|awk {''print $2''})
 84          fi
 85    }
 86    
 87    function super_user
 88    {
 89          if [ "$UID" = "0" ]; then
 90            return 0         # Yes, super user
 91          else
 92            return 1
 93          fi
 94    }
 95    
 96    function read_param
 97    {
 98          read -p "Username: " username
 99          read -s -p "Password: " password
100          echo
101    }
102    
103    function write_settings
104    {
105          if [ -e $L2TPD_CFG_FILE ]; then
106            mv $L2TPD_CFG_FILE $L2TPD_CFG_FILE.old
107          fi
108        
109          cat>$L2TPD_CFG_FILE<<EOF
110        [global]                    ; Global parameters:
111        port = 1701                 ; * Bind to port 1701
112        access control = yes        ; * Refuse connections without IP match
113        rand source = dev           ; Source for entropy for random
114        
115        [lac zju]
116        lns = $LNS                  ; * Who is our LNS?
117        redial = yes                ; * Redial if disconnected?
118        redial timeout = 3          ; * Wait n seconds between redials
119        max redials = 999           ; * Give up after n consecutive failures
120        require chap = yes          ; * Require CHAP auth. by peer
121        refuse pap = yes            ; * Refuse PAP authentication
122        require authentication = no     ; * Require peer to authenticate
123        ppp debug = yes                    ; * Turn on PPP debugging
124        pppoptfile = $PPP_OPT_FILE  ; * ppp options file for this lac
125        name = $username
126        EOF
127        
128          if [ -e $PPP_OPT_FILE ]; then
129            mv $PPP_OPT_FILE $PPP_OPT_FILE.old
130          fi
131        
132          cat>$PPP_OPT_FILE<<EOF
133        asyncmap 0
134        noauth
135        crtscts
136        lock
137        hide-password
138        modem
139        netmask 255.255.255.0
140        proxyarp
141        lcp-echo-failure 4
142        lcp-echo-interval 30
143        ipcp-accept-local
144        ipcp-accept-remote
145        noipx
146        defaultroute
147        mru 1400
148        mtu 1400
149        EOF
150        
151          sed -i /$username/d $CHAP_SECRET_FILE
152          echo "$username  *  $password  *" >> $CHAP_SECRET_FILE
153          chmod 600 $CHAP_SECRET_FILE
154        
155          return 0
156    }
157    
158    function free_param
159    {
160          unset username
161          unset password
162          return 0
163    }
164    
165    function ppp_alive
166    {
167          if ip addr show | grep "inet.*$PPP" > /dev/null; then
168            return 0         # Yes, connected
169          else
170            return 1
171          fi
172    }
173    
174    function bring_up_ppp
175    {
176          [ -d $L2TPD_CONTROL_DIR ] || mkdir $L2TPD_CONTROL_DIR
177          if [ ! -e $L2TPD_CONTROL_FILE ]; then
178            echo "[MSG] L2tpd daemon not running!"
179            if ! restart_l2tpd ; then
180              return 1        # l2tpd not started
181            fi
182          fi
183          echo "c $L2TPD_LAC" > $L2TPD_CONTROL_FILE
184          for i in $(seq 0 $TIMEOUT)
185          do
186            if ppp_alive; then
187              echo " Done!"
188              return 0     # Yes, brought up!
189            fi
190            echo -n -e "\\r[MSG] Trying to bring up vpn... $i secs..."
191            sleep 1
192          done
193          echo
194          echo "[ERR] Failed to bring up vpn!"
195          return 1
196    }
197    
198    function setup_route
199    {
200          echo "[MSG] Detected gateway: $GW, PPP device: $PPP ."
201          echo -n "[MSG] Setting up route table...  "
202        
203          ip route add 10.0.0.0/8 metric 10 via $GW 2>/dev/null
204          ip route add 210.32.0.0/20 metric 10 via $GW 2>/dev/null
205          ip route add 210.32.128.0/18 metric 10 via $GW 2>/dev/null
206          ip route add 222.205.0.0/16 metric 10 via $GW 2>/dev/null
207          ip route del default 2>/dev/null
208          ip route add default dev $PPP 2>/dev/null
209          echo "Done!"
210    }
211    
212    function restart_l2tpd
213    {
214          echo "[MSG] Restarting l2tpd... "
215          #$L2TPD_INIT_FILE restart
216          systemctl restart xl2tpd
217          for i in $(seq $L2TPD_TIMEOUT)
218          do
219            if [ -e $L2TPD_CONTROL_FILE ]; then
220              echo "[MSG] Done!"
221              return 0         # Successfully restarted!
222            fi
223            sleep 1
224          done
225          echo "[ERR] Failed to restart l2tpd!"
226          return 1         # Failed to restart l2tpd
227    }
228    
229    ####################
230    # Main
231    ####################
232    if ! super_user ; then
233      echo "[ERR] You must be super user to run this utility!"
234      exit 1
235    fi
236    
237    init ## Get $GW and $PPP
238    
239    if [ $; then
240      connect
241    elif [ "0" = "-d" ]; then
242      disconnect
243    elif [ "0" = "-r" ]; then
244      reconnect
245    elif [ "0" = "-c" ]; then
246      configure
247    elif [ "0" = "-h" ]; then
248      usage
249    else
250      echo "[ERR] Unknown parameter.";
251    fi
